openapi: 3.0.3
info:
  title: AstroApp Backend
  version: 1.1.0
servers:
  - url: /

paths:
  /api/health:
    get:
      summary: Health check
      tags: [System]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/calculate:
    post:
      summary: Compute chart and houses
      tags: [Astrology]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartRequest'
      responses:
        "200":
          description: Chart and houses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartResponse'

  /api/report:
    post:
      summary: Generate narrative report
      tags: [Astrology]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartRequest'
      responses:
        "200":
          description: Narrative aligned to computed chart/houses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportResponse'

  /api/predictions:
    post:
      summary: Gold-standard predictions with confidence scoring
      tags: [Astrology]
      parameters:
        - in: query
          name: engine
          schema:
            type: string
            enum: [phase1, v2]
          description: >
            Force a specific engine. Default: Phase-1 if ephemeris available, otherwise v2.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PredictionRequestV2'
      responses:
        "200":
          description: Predictions response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictionsResponseV2'
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "502":
          description: Engine error (ephemeris unavailable, etc.)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rectification/quick:
    post:
      summary: Quick birth-time rectification window search
      tags: [Astrology]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RectificationRequest'
      responses:
        "200":
          description: Rectification candidates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RectificationResponse'

  /api/config:
    get:
      summary: Runtime configuration and timescale sample
      tags: [System]
      responses:
        "200":
          description: Current config snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'

  /system-validation:
    get:
      summary: System validation & policy snapshot
      tags: [System]
      responses:
        "200":
          description: System validation summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemValidationResponse'

components:
  schemas:
    # ───────── request schemas ─────────
    ChartRequest:
      type: object
      required: [date, time, latitude, longitude, mode]
      properties:
        date: { type: string, format: date }
        time: { type: string }
        place_tz: { type: string }
        timezone: { type: string }
        latitude: { type: number }
        longitude: { type: number }
        mode: { type: string, enum: [sidereal, tropical] }
        house_system: { type: string }
      oneOf:
        - required: [place_tz]
        - required: [timezone]

    PredictionRequestV2:
      type: object
      required: [birth, window, preferences]
      properties:
        birth:
          type: object
          required: [date, time, tz, lat, lon]
          properties:
            date: { type: string, format: date }
            time: { type: string }
            tz:   { type: string }
            lat:  { type: number }
            lon:  { type: number }
        window:
          type: object
          description: Start/end ISO datetimes or relative days_ahead
          properties:
            start: { type: string, format: date-time }
            end:   { type: string, format: date-time }
            days_ahead: { type: integer }
        preferences:
          type: object
          properties:
            zodiac: { type: string }
            ayanamsa: { type: string }
            house_system: { type: string }
        topics:
          type: array
          items: { type: string }
        max_events:
          type: integer
          default: 20

    RectificationRequest:
      allOf:
        - $ref: '#/components/schemas/ChartRequest'
        - type: object
          properties:
            window_minutes:
              type: integer
              minimum: 5
              maximum: 10080
              default: 120

    # ───────── response schemas ─────────
    HealthResponse:
      type: object
      properties:
        ok: { type: boolean }
        status: { type: string }
        version: { type: string }

    ChartResponse:
      type: object
      properties:
        ok: { type: boolean }
        chart: { type: object }
        houses: { type: object }
        meta:
          type: object
          properties:
            timescales:
              $ref: '#/components/schemas/Timescales'

    ReportResponse:
      type: object
      properties:
        ok: { type: boolean }
        chart: { type: object }
        houses: { type: object }
        narrative: { type: string }
        meta:
          type: object
          properties:
            timescales:
              $ref: '#/components/schemas/Timescales'

    PredictionsResponseV2:
      type: object
      properties:
        version: { type: string }
        schema: { type: string }
        request_id: { type: string }
        metadata:
          type: object
          properties:
            engine: { type: object }
            inputs: { type: object }
            summary: { type: string }
        predictions:
          type: array
          items:
            $ref: '#/components/schemas/PredictionV2'

    PredictionV2:
      type: object
      properties:
        id: { type: string }
        topic: { type: string }
        date: { type: string }
        score: { type: number }
        confidence:
          type: object
          properties:
            value: { type: number }
            label: { type: string }
        narrative: { type: string }
        signals:
          type: array
          items:
            type: object
            properties:
              aspect: { type: string }
              bodies: { type: array, items: { type: string } }
              orb: { type: number }
              strength: { type: number }
              direction: { type: string }

    RectificationResponse:
      type: object
      properties:
        ok: { type: boolean }
        best_time: { type: string }
        composite_scores:
          type: array
          items: { type: object }
        features_at_peak:
          type: array
          items: { type: string }
        margin_delta: { type: number }

    Timescales:
      type: object
      properties:
        jd_utc: { type: number }
        jd_tt:  { type: number }
        jd_ut1: { type: number }
        delta_t: { type: number }
        delta_at: { type: number }
        dut1: { type: number }
        warnings: { type: array, items: { type: string } }

    ConfigResponse:
      type: object
      properties:
        ok: { type: boolean }
        mode: { type: string }
        ayanamsa: { type: string, nullable: true }
        rate_limits_per_hour: { type: integer, nullable: true }
        pro_features_enabled: { type: boolean, nullable: true }
        calibrators_version: { type: string, nullable: true }
        hc_thresholds_summary: { type: object, nullable: true }
        timescale_sample:
          oneOf:
            - $ref: '#/components/schemas/Timescales'
            - type: "null"
        leap_policy: { type: string }
        version: { type: string }

    SystemValidationResponse:
      type: object
      properties:
        ok: { type: boolean }
        astronomy_accuracy: { type: string }
        performance_slo: { type: object }
        mode_consistency: { type: object }
        policy: { type: object }
        leap_seconds: { type: object, nullable: true }
        version: { type: string }

    ErrorResponse:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
        request_id: { type: string }
        details: { type: string }
